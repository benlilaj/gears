// Copyright 2007, Google Inc.
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice, 
//     this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//  3. Neither the name of Google Inc. nor the names of its contributors may be
//     used to endorse or promote products derived from this software without
//     specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import "oaidl.idl";
import "ocidl.idl";

//------------------------------------------------------------------------------
// GearsHttpRequest
//------------------------------------------------------------------------------
[
  object,
  uuid(28652DBF-5165-46bf-9E5E-78ACEA260237),
  dual,
  nonextensible,
  pointer_default(unique)
]
interface GearsHttpRequestInterface : IDispatch {
  // event handler
  [propput] HRESULT onreadystatechange([in] VARIANT *handler);
  [propget] HRESULT onreadystatechange([out, retval] VARIANT *handler);

  // state
  [propget] HRESULT readyState([out, retval] int *state);

  // request
  HRESULT open([in] const BSTR method,
               [in] const BSTR url,
               [in, optional] const VARIANT *async);
  HRESULT setRequestHeader([in] const BSTR header,
                           [in] const BSTR value);
  HRESULT send([in, optional] const VARIANT *data);
  HRESULT abort();

  // response
  HRESULT getAllResponseHeaders([out, retval] BSTR *headers);
  HRESULT getResponseHeader([in] const BSTR headerName,
                            [out, retval] BSTR *headerValues);
  [propget] HRESULT responseText([out, retval] BSTR *body);

#ifdef OFFICIAL_BUILD
  // Blob support is not ready for prime time yet
#else
  [propget] HRESULT responseBlob([out, retval] IUnknown **body);
#endif

  [propget] HRESULT status([out, retval] int *statusCode);
  [propget] HRESULT statusText([out, retval] BSTR *statusText);
};
