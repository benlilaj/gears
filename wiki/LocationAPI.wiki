#summary Provides means to fetch the location of a device running a Web browser with Gears.
= Introduction =

The purpose of this API is to provide means to fetch the location of a device running a Web browser with Gears.


= Description =

The Location API is an abstraction for the various location APIs that currently exist on mobile platforms (GPS-based, network/cellid-based). The API consists of the Location class, which encapsulates various location attributes (latitude, longitude, etc), and also provides the means to query the platform for a fresh location fix, or the last known fix. This API also provides a way to watch the location as it changes over time.

Location implementations can be straightforward mappings to native APIs (e.g the [http://www.forum.nokia.com/document/Cpp_Developers_Library/GUID-96C272CA-2BED-4352-AE7C-E692B193EC06/html/Location_Acquisition_APIIndexPage.html S60 Location Acquisition API]) or have a more complex design that combines several location providers (e.g a GPS-based provider and a cell id-based provider) and returns the location from the most accurate provider at any given time.


= API Goals =

  * One-shot location requests (eg, for recommendations sites -- "where am I right now?")
  * Repeated location updates (eg, for providing guided tours)
  * Ability to get the last-known position cheaply before doing an expensive new request
  * Compatibility with future use as a singleton in the standard DOM (eg window.geoLocation)
  * Ability to use alternative location service providers

= Examples = 

{{{
// Get the current location
var location = google.gears.factory.create( "beta.location");
location.get(function(result) {
  if (!result.errorCode) {
    updateMap(result.latitude, result.longitude);
  }
});
}}}

{{{
// Watch the location over time
var location = google.gears.factory.create( "beta.location");
var watchId = location.watch(function(result) {
  updateMap(result.latitude, result.longitude, result.accuracy);
});

location.clearWatch(watchId);
}}}

{{{
// Only get the location if the last known location is more than a minute old
var now = new Date().getTime();
var threshold = now - 60000;

if (location.lastKnownLocation &&
    location.lastKnownLocation.timestamp.getTime() > threshold) {
  updateMap(location.lastKnownLocation);
} else {
  location.get(function(result) {
    updateMap(result);
  });
}
}}}

= Detailed API specification =

{{{
interface GearsLocation {
  // error constants
  const short ERROR_UNKNOWN = 1;
  const short ERROR_NO_PROVIDER_AVAILABLE = 2;
  const short ERROR_NO_SIGNAL = 3;
  const short ERROR_SECURITY = 4;
  const short ERROR_NOT_IN_RANGE = 5;

  // last-known position - null if there is no last known position
  readonly LocationResult lastKnownLocation;

  // Get the current location
  void get(LocationCallback callback, optional LocationOptions);

  // Watch the current location over time
  int watch(LocationCallback callback, optional LocationOptions);

  // Stop watching the current location
  void clearWatch(int watchId);
};

interface LocationOptions {
  // If set, the application would prefer the highest accuracy possible, regardless of
  // battery, cost, etc. This might mean, for example, to use the GPS radio instead of
  // cell id lookups. If not specified, the default value is false. The implementation
  // always has the last word on which mechanism to use, this is just a way for an
  // application to express a preference.
  bool highAccuracyDesired;

  // If set, specifies the URL to contact to convert location signals into a location. This
  // defaults to a Google service, but can be overridden to point elsewhere. If set to
  // null, no service will be used and a location will only be provided if the device has
  // native access to location data (eg GPS).
  // TODO: Document the request and response format.
  string locationProviderUrl;
};

interface WatchLocationOptions : LocationOptions {
  // The frequency that the application desires updates on the position, in milliseconds.
  // The implementation will attempt to provide this rate, but may provide slower
  // updates to conserve battery, if it cannot get fixes, or if the user rejects use of the
  // required hardware.
  bool desiredUpdateRate;
};

void LocationCallback(LocationResult event);

interface Location {
  readonly decimal latitude; // latitude in degrees
  readonly decimal longitude; // longitude in degrees
  readonly Date timestamp;
  readonly int accuracy;
};

interface LocationResult : Location {
  readonly int errorCode;
  readonly string errorMessage; // human readable, suitable for logs
};
}}}

= Privacy =

It must be clear to users when an application is using the Location API. The dialog that currently enables Gears general access should not also enable access to the location API. It would be too easy for users to forget that they allowed access to Gears, or to fail to realize that enabling Gears also also enables location access. At a minimum, there should be a separate dialog from the Gears access dialog to enable Location API access.  

It would also be interesting, though, to have some persistent UI that indicates that the location API is being used. For example, there could be a rotating globe or an icon of a map overlayed on the content area. Perhaps this UI should be 'active' somehow, indicating that something is happening, so that the user cannot forget that it is being used.