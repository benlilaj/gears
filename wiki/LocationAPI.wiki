#summary Provides means to fetch the location of a device running a Web browser with Gears.
= Introduction =

The purpose of this API is to provide means to fetch the location of a device running a Web browser with Gears.


= Description =

The Location API is an abstraction for the various LBS APIs that currently exist on mobile platforms (GPS-based, network/cellid-based). The API consists of the Location class, which encapsulates various location attributes (latitude, longitude, etc), and also provides the means to query the platform for a location fix. This API also adds a new event type that is fired every time the location changes. Location implementations can be straightforward mappings to native LBS APIs (e.g the [http://www.forum.nokia.com/document/Cpp_Developers_Library/GUID-96C272CA-2BED-4352-AE7C-E692B193EC06/html/Location_Acquisition_APIIndexPage.html S60 Location Acquisition API]) or have a more complex design that combines several location providers (e.g a GPS-based provider and a cell id-based provider) and returns the location from the most accurate provider at any given time.

= API Goals =

  * One-shot location requests (eg, for recommendations sites -- "where am I right now?")
  * Repeated location updates (eg, for getting guided tours), where the API controls the minimum update rate
  * Ability to get last-known position before doing an expensive new request
  * Compatibility with future use as a singleton (for example window.geoLocation in browsers).

= Examples = 

{{{
// Get the current location
var location = google.gears.factory.create( "beta.location", "1.0" );
location.get(function(result) {
  if (!result.errorCode) {
    updateMap(result.latitude, result.longitude);
  }
});
}}}

{{{
// Watch the location over time
var location = google.gears.factory.create( "beta.location", "1.0" );
var watchId = location.watch(function(result) {
  updateMap(result.latitude, result.longitude, result.accuracy);
});

location.clearWatch(watchId);
}}}

{{{
// Only get the location if the last known location is more than a minute old
var now = new Date().getTime();
var threshold = now - 60000;

if (location.lastKnownLocation && location.lastKnownLocation.date > threshold) {
  updateMap(location.lastKnownLocation);
} else {
  location.get(function(result) {
    updateMap(result);
  });
}
}}}

= Detailed API specification =

{{{
interface GearsLocation {
  // error constants
  const short ERROR_NONE = 0;
  const short ERROR_UNKNOWN = -1;
  const short ERROR_NO_PROVIDER_AVAILABLE = -2;
  const short ERROR_NO_SIGNAL = -3;
  const short ERROR_SECURITY = -4;
  const short ERROR_NOT_IN_RANGE = -5;

  // last-known data
  readonly LocationResult lastKnownLocation; // null if no last known position

  // methods
  void get(LocationCallback callback, optional LocationOptions);
  int watch(LocationCallback callback, optional LocationOptions);
  void clearWatch(int watchId);
};

interface LocationOptions {
  bool highAccuracyDesired;
};

interface WatchLocationOptions : LocationOptions {
  bool minDesiredUpdate;
};

void LocationCallback(LocationResult event);

interface Location {
  readonly decimal latitude;
  readonly decimal longitude;
  readonly string provider;
  readonly Date timestamp;
  readonly int accuracy;
};

interface LocationResult : Location {
  readonly int errorCode;
  readonly string errorMessage; // human readable, suitable for logs
};
}}}

TODO: detailed notes on apis.