#summary Provides the geolocation of a device running a Gears-enabled web browser.
#labels DesignDoc

= Summary =

The Geolocation API allows web apps to retrieve the user's current position.  The API should provide the following features:

  * One-shot location requests (e.g. for recommendations sites -- "where am I right now?")
  * Repeated location updates (e.g. for updating one's position on a map)
  * Ability to get the last-known position cheaply before doing an expensive new request
  * Compatibility with future use as a singleton in the standard DOM (e.g. window.geolocation)
  * Support for alternative location service providers

= API Proposal =

{{{
interface Geolocation {
  // Last known position, or 'null' if there is no last known position.
  readonly Position lastPosition;

  // Get the current position.
  void getCurrentPosition(PositionCallback callback, optional PositionOptions);

  // Watch the current position over time.
  int watchPosition(PositionCallback callback, optional PositionOptions,
                    int desiredIntervalMsec);

  // Stop watching the current position.
  void clearWatch(int watchId);
};

void PositionCallback(Position position);

interface Position {
  readonly double latitude;  // latitude in degrees
  readonly double longitude;  // longitude in degrees
  readonly Date timestamp;
  readonly int accuracy;  // accuracy in meters
  readonly string errorMessage; // human readable, suitable for logs
  // TODO: Consider adding altitude, heading, etc.
};

interface PositionOptions {
  // If set, the application would prefer the highest accuracy possible,
  // regardless of battery, cost, etc. This might mean, for example, to use
  // the GPS radio instead of cell id lookups. If not specified, the default
  // value is false. The implementation always has the last word on which
  // mechanism to use, this is just a way for an application to express a
  // preference.
  bool highAccuracyDesired;

  // If set, specifies the URL to contact to convert location signals into a
  // location. This defaults to a Google service, but can be overridden to
  // point elsewhere. If set to null, no service will be used and a location
  // will only be provided if the device has native access to location data
  // (e.g. GPS).
  string locationProviderUrl;
};
}}}

= Examples = 

{{{
// Get the current location
var loc = google.gears.factory.create('beta.location');
loc.get(function(result) {
  if (!result.errorCode) {
    updateMap(result.latitude, result.longitude);
  }
});
}}}

{{{
// Watch the location over time
var loc = google.gears.factory.create('beta.location');
var watchId = loc.watch(function(result) {
  updateMap(result.latitude, result.longitude, result.accuracy);
});

loc.clearWatch(watchId);
}}}

{{{
// Only get the location if the last known location is more than a minute old
var now = new Date().getTime();
var threshold = now - 60000;

if (loc.lastKnownLocation &&
    loc.lastKnownLocation.timestamp.getTime() > threshold) {
  updateMap(loc.lastKnownLocation);
} else {
  loc.get(function(result) {
    updateMap(result);
  });
}
}}}

= Implementation Details =

The Geolocation API is an abstraction for various location APIs that currently exist on mobile platforms (GPS-based, network/cellid-based). Location implementations could be straightforward mappings to native APIs (e.g the [http://www.forum.nokia.com/document/Cpp_Developers_Library/GUID-96C272CA-2BED-4352-AE7C-E692B193EC06/html/Location_Acquisition_APIIndexPage.html S60 Location Acquisition API]) or have a more complex design that combines several location providers (e.g. a GPS-based provider and a cell id-based provider) and returns the location from the most accurate provider at any given time.

_TODO: Need more detail about how results will be combined._

= Alternatives =

An alternative to the locationProviderUrl property is to add more elements to the Location interface with all the signals required by location providers. For example, we could add an arrays of !CellTower and !WifiTower objects to the location object. A !JavaScript author could then tie all this information together with a location provider, creating a unified API.

= Privacy =

It must be clear to users when an application is using the Location API. The dialog that currently enables Gears general access should not also enable access to the location API. It would be too easy for users to forget that they allowed access to Gears, or to fail to realize that enabling Gears also also enables location access. At a minimum, there should be a separate dialog from the Gears access dialog to enable Location API access.  

It would also be interesting, though, to have some persistent UI that indicates that the location API is being used. For example, there could be a rotating globe or an icon of a map overlayed on the content area. Perhaps this UI should be 'active' somehow, indicating that something is happening, so that the user cannot forget that it is being used.

The protocol between the device and the location service provider is HTTP POST, and the format is JSON. The client supports persistent HTTP cookies, but the cookie are *not* shared with the browser's cookie jar for privacy reasons.

= Appendix: Location Provider Protocol =

Many devices do not have native access to GPS or other location data. Additionally, GPS can take a long time to start up, drains battery, and does not work indoors. Because of these problems, the location API also has the ability to send various signals that the devices has access to (nearby cell sites, wifi nodes, etc) to a third-party _location service provider_, who can resolve the signals into a location estimate.

== Request Format ==

The request uses an HTTP POST method with JSON contents. An example request is:

{{{
{
  version: "1.0",
  host: "maps.google.com",
  device_id: "0220d4df7d8d48dcbb3f3ff433a8044a",
  home_network_code: _TODO_,
  home_country_code: _TODO_,
  radio_type: "gsm",
  cell_towers: [
    {
      cell_id: 42,
      area_code: 2023,
      network_code: 3333,
      country_code: 4444,
      age: 0,
      signal_strength: 3,
      timing_advance: 5555
    },
    {
      cell_id: 88,
      area_code: 2027,
      network_code: 3333,
      country_code: 4444,
      age: 36000,
      signal_strength: 2,
      timing_advance: 7777
    },
    {
      cell_id: 23,
      area_code: 2017,
      network_code: 3333,
      country_code: 4444,
      age: 92000,
      signal_strength: 1,
      timing_advance: 9999
    }
  ],
  wifi_towers: [
    {
      mac_address: "01-23-45-67-89-ab",
      signal_strength: 8
    },
    {
      mac_address: "01-23-45-67-89-ac",
      signal_strength: 4
    }
  ]
}
}}}

=== Request field details ===

|| *Name* || *Description* || *Required* || *Type" ||
|| version || The protocol version. Currently, this is "1.0". || Yes || string ||
|| host || The host of the web page that is requesting the location. || Yes || string ||
|| device_id || Globally unique device ID, generated by Gears. _TODO: Do we need this? Would a cookie suffice?_ || Yes || string ||
|| home_network_code || Home mobile network code. _TODO: Can somebody explain what this is better?_ || No || int32 ||
|| home_country_code || Home mobile country code. _TODO: Can somebody explain what this is better?_ || No || int32 ||
|| radio_type || Mobile radio type. _TODO: Can somebody expand on why this is necessary/useful?_ || No || string (gsm|cdma|wcdma) ||
|| cell_towers || Array of cell-id data objects. See description of cell-id below. || If wifi_data not present || array ||
|| wifi_towers || Array of wifi-id data objects. See description of wifi-id below. || If cellid_data not present || array ||

=== Cell-Id data elements ===

|| *Name* || *Description* || *Required* || *Type" ||
|| cell_id || Unique identifier of the cell. || Yes || string ||
|| area_code || _TODO: explanation required_ || Yes || int16 ||
|| network_code || _TODO: explanation required_ || No || int16 ||
|| country_code || _TODO: explanation required_ || No || int16 ||
|| age || Number of milliseconds since this cell was primary. If zero, this cell is primary currently. || No || int16 ||
|| signal_strength || Radio signal strength measured age seconds ago.  _TODO: What is the unit? Please tell me it is "bars", as in the cingular commercial :-)_. || No || int16 ||
|| timing_advance || Timing advance measured age seconds ago. _TODO: More explanation would be nice._ || No || int8 ||

=== Wifi-Id data elements ===

|| *Name* || *Description* || *Required* || *Type" ||
|| mac_address || The mac address of the wifi node. || Yes || string ||
|| signal_strength || Current signal strength. _TODO: What are the units?_ || No || int16 ||

== Response Format ==

The response format is also JSON. An example response is:

{{{
{
  confidence:95
  latitude:1234123,
  longitude:-2132362,
  accuracy:1200,
  address:"mountain view, california"
}
}}}
_TODO: Wooo!  I didn't know we had access to the address. Should we expose this in the API?_

=== Response format details ===

|| *Name* || *Description* || *Required* || *Type" ||
|| confidence || The server's confidence of the response being correct (0-100): _TODO: This doesn't really seem concrete enough for the client to do something with. Can we remove it?_ || Yes || int ||
|| latitude || Latitude of the fix, in degrees. || Yes || double ||
|| longitude || Longitude of the fix, in degrees. || Yes || double ||
|| accuracy || The accuracy of the fix, in meters. || Yes || double ||
|| address || The address of the fix. May not be available from some providers. || No || string ||

The usual HTTP responses also apply. In particular, 200: location found, 400 bad request, and 404 location not found.